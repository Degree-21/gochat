// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

// Package helpers is a generated GoMock package.
package helpers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHTTPOption is a mock of HTTPOption interface
type MockHTTPOption struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPOptionMockRecorder
}

// MockHTTPOptionMockRecorder is the mock recorder for MockHTTPOption
type MockHTTPOptionMockRecorder struct {
	mock *MockHTTPOption
}

// NewMockHTTPOption creates a new mock instance
func NewMockHTTPOption(ctrl *gomock.Controller) *MockHTTPOption {
	mock := &MockHTTPOption{ctrl: ctrl}
	mock.recorder = &MockHTTPOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPOption) EXPECT() *MockHTTPOptionMockRecorder {
	return m.recorder
}

// apply mocks base method
func (m *MockHTTPOption) apply(arg0 *httpOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "apply", arg0)
}

// apply indicates an expected call of apply
func (mr *MockHTTPOptionMockRecorder) apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "apply", reflect.TypeOf((*MockHTTPOption)(nil).apply), arg0)
}

// MockHTTPBody is a mock of HTTPBody interface
type MockHTTPBody struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPBodyMockRecorder
}

// MockHTTPBodyMockRecorder is the mock recorder for MockHTTPBody
type MockHTTPBodyMockRecorder struct {
	mock *MockHTTPBody
}

// NewMockHTTPBody creates a new mock instance
func NewMockHTTPBody(ctrl *gomock.Controller) *MockHTTPBody {
	mock := &MockHTTPBody{ctrl: ctrl}
	mock.recorder = &MockHTTPBodyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPBody) EXPECT() *MockHTTPBodyMockRecorder {
	return m.recorder
}

// FieldName mocks base method
func (m *MockHTTPBody) FieldName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FieldName indicates an expected call of FieldName
func (mr *MockHTTPBodyMockRecorder) FieldName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldName", reflect.TypeOf((*MockHTTPBody)(nil).FieldName))
}

// FileName mocks base method
func (m *MockHTTPBody) FileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FileName indicates an expected call of FileName
func (mr *MockHTTPBodyMockRecorder) FileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileName", reflect.TypeOf((*MockHTTPBody)(nil).FileName))
}

// Bytes mocks base method
func (m *MockHTTPBody) Bytes() func() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].(func() ([]byte, error))
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockHTTPBodyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockHTTPBody)(nil).Bytes))
}

// MockHTTPClient is a mock of HTTPClient interface
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockHTTPClient) Get(ctx context.Context, url string, options ...HTTPOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHTTPClientMockRecorder) Get(ctx, url interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), varargs...)
}

// Post mocks base method
func (m *MockHTTPClient) Post(ctx context.Context, url string, body HTTPBody, options ...HTTPOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url, body}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Post", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockHTTPClientMockRecorder) Post(ctx, url, body interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url, body}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClient)(nil).Post), varargs...)
}

// PostXML mocks base method
func (m *MockHTTPClient) PostXML(ctx context.Context, url string, body WXML, options ...HTTPOption) (WXML, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url, body}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostXML", varargs...)
	ret0, _ := ret[0].(WXML)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostXML indicates an expected call of PostXML
func (mr *MockHTTPClientMockRecorder) PostXML(ctx, url, body interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url, body}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostXML", reflect.TypeOf((*MockHTTPClient)(nil).PostXML), varargs...)
}

// Upload mocks base method
func (m *MockHTTPClient) Upload(ctx context.Context, url string, body HTTPBody, options ...HTTPOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url, body}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockHTTPClientMockRecorder) Upload(ctx, url, body interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url, body}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockHTTPClient)(nil).Upload), varargs...)
}
